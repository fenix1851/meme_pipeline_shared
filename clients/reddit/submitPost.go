package reddit

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// SubmitPost –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –≤ Reddit. –ï—Å–ª–∏ post.URL –Ω–µ –ø—É—Å—Ç–æ–π, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è link-–ø–æ—Å—Ç,
// –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–π (self) –ø–æ—Å—Ç.
func (c *RedditClient) SubmitPost(post PostData) (subredditLink string, err error) {
	// –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
	data := url.Values{}
	data.Set("sr", post.Subreddit)
	data.Set("title", post.Title)
	data.Set("api_type", "json")
	data.Set("kind", "link")
	data.Set("url", post.Url)

	// –°–æ–∑–¥–∞–µ–º POST-–∑–∞–ø—Ä–æ—Å –∫ Reddit API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞
	req, err := http.NewRequest("POST", "https://oauth.reddit.com/api/submit", strings.NewReader(data.Encode()))
	if err != nil {
		return "", err
	}
	req.Header.Set("Authorization", "bearer "+c.token)
	req.Header.Set("User-Agent", c.cfg.AuthData.UserAgent)
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := c.httpClient.Do(req)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	// –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª (403), –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
	if resp.StatusCode == http.StatusForbidden || resp.StatusCode == http.StatusUnauthorized {
		fmt.Println("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω, –ø—Ä–æ–±—É—é –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω...")
		if err := c.RefreshToken(); err != nil {
			return "", err
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
		req.Header.Set("Authorization", "bearer "+c.token)
		resp, err = c.httpClient.Do(req)
		if err != nil {
			return "", err
		}
		defer resp.Body.Close()
	}

	// –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (429), –∂–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
	if resp.StatusCode == http.StatusTooManyRequests {
		fmt.Println("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –∂–¥—É 5 —Å–µ–∫—É–Ω–¥...")
		time.Sleep(7 * time.Second)
		resp, err = c.httpClient.Do(req)
		if err != nil {
			return "", err
		}
		defer resp.Body.Close()
	}

	// –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ 200, —á–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
	if resp.StatusCode != http.StatusOK {
		bodyBytes, _ := ioutil.ReadAll(resp.Body)
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç, —Å—Ç–∞—Ç—É—Å: %d, –æ—Ç–≤–µ—Ç: %s", resp.StatusCode, string(bodyBytes))
	}

	SubmitPostResponse := SubmitPostResponse{}
	if err := json.NewDecoder(resp.Body).Decode(&SubmitPostResponse); err != nil {
		return "", err
	}

	fmt.Println("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
	fmt.Printf("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: %+v\n", SubmitPostResponse)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç
	return SubmitPostResponse.JSON.Data.URL, nil
}
