package reddit

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// RefreshToken –æ–±–Ω–æ–≤–ª—è–µ—Ç access_token, –µ—Å–ª–∏ –æ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –ø—Ä–∏ 403 –∏–ª–∏ 401
func (c *RedditClient) RefreshToken() error {
	// –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
	data := url.Values{}
	data.Set("grant_type", "refresh_token")
	data.Set("refresh_token", c.refreshToken)

	url := fmt.Sprintf("%s/api/v1/access_token", c.cfg.URL)
	// –°–æ–∑–¥–∞–µ–º POST-–∑–∞–ø—Ä–æ—Å –∫ Reddit API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
	req, err := http.NewRequest("POST", url, bytes.NewBufferString(data.Encode()))
	if err != nil {
		return err
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
	req.SetBasicAuth(c.cfg.AuthData.ClientID, c.cfg.AuthData.ClientSecret)
	req.Header.Set("User-Agent", c.cfg.AuthData.UserAgent)
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := c.httpClient.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω
	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("failed to refresh token, status: %d", resp.StatusCode)
	}

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
	var result map[string]interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return err
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ
	if newToken, ok := result["access_token"].(string); ok {
		c.token = newToken
		fmt.Println("üîÑ Access token refreshed successfully!")
		return nil
	}

	return fmt.Errorf("no access token in response")
}
